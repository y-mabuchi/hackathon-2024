// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: child_profile.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChildProfileServiceClient is the client API for ChildProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChildProfileServiceClient interface {
	FindOneChildProfile(ctx context.Context, in *FindOneChildProfileRequest, opts ...grpc.CallOption) (*FindOneChildProfileResponse, error)
	CreateChildProfile(ctx context.Context, in *CreateChildProfileRequest, opts ...grpc.CallOption) (*CreateChildProfileResponse, error)
	UpdateChildProfile(ctx context.Context, in *UpdateChildProfileRequest, opts ...grpc.CallOption) (*UpdateChildProfileResponse, error)
	DeleteChildProfile(ctx context.Context, in *DeleteChildProfileRequest, opts ...grpc.CallOption) (*DeleteChildProfileResponse, error)
}

type childProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChildProfileServiceClient(cc grpc.ClientConnInterface) ChildProfileServiceClient {
	return &childProfileServiceClient{cc}
}

func (c *childProfileServiceClient) FindOneChildProfile(ctx context.Context, in *FindOneChildProfileRequest, opts ...grpc.CallOption) (*FindOneChildProfileResponse, error) {
	out := new(FindOneChildProfileResponse)
	err := c.cc.Invoke(ctx, "/child_profile.ChildProfileService/FindOneChildProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childProfileServiceClient) CreateChildProfile(ctx context.Context, in *CreateChildProfileRequest, opts ...grpc.CallOption) (*CreateChildProfileResponse, error) {
	out := new(CreateChildProfileResponse)
	err := c.cc.Invoke(ctx, "/child_profile.ChildProfileService/CreateChildProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childProfileServiceClient) UpdateChildProfile(ctx context.Context, in *UpdateChildProfileRequest, opts ...grpc.CallOption) (*UpdateChildProfileResponse, error) {
	out := new(UpdateChildProfileResponse)
	err := c.cc.Invoke(ctx, "/child_profile.ChildProfileService/UpdateChildProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childProfileServiceClient) DeleteChildProfile(ctx context.Context, in *DeleteChildProfileRequest, opts ...grpc.CallOption) (*DeleteChildProfileResponse, error) {
	out := new(DeleteChildProfileResponse)
	err := c.cc.Invoke(ctx, "/child_profile.ChildProfileService/DeleteChildProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChildProfileServiceServer is the server API for ChildProfileService service.
// All implementations must embed UnimplementedChildProfileServiceServer
// for forward compatibility
type ChildProfileServiceServer interface {
	FindOneChildProfile(context.Context, *FindOneChildProfileRequest) (*FindOneChildProfileResponse, error)
	CreateChildProfile(context.Context, *CreateChildProfileRequest) (*CreateChildProfileResponse, error)
	UpdateChildProfile(context.Context, *UpdateChildProfileRequest) (*UpdateChildProfileResponse, error)
	DeleteChildProfile(context.Context, *DeleteChildProfileRequest) (*DeleteChildProfileResponse, error)
	mustEmbedUnimplementedChildProfileServiceServer()
}

// UnimplementedChildProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChildProfileServiceServer struct {
}

func (UnimplementedChildProfileServiceServer) FindOneChildProfile(context.Context, *FindOneChildProfileRequest) (*FindOneChildProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneChildProfile not implemented")
}
func (UnimplementedChildProfileServiceServer) CreateChildProfile(context.Context, *CreateChildProfileRequest) (*CreateChildProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChildProfile not implemented")
}
func (UnimplementedChildProfileServiceServer) UpdateChildProfile(context.Context, *UpdateChildProfileRequest) (*UpdateChildProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChildProfile not implemented")
}
func (UnimplementedChildProfileServiceServer) DeleteChildProfile(context.Context, *DeleteChildProfileRequest) (*DeleteChildProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChildProfile not implemented")
}
func (UnimplementedChildProfileServiceServer) mustEmbedUnimplementedChildProfileServiceServer() {}

// UnsafeChildProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChildProfileServiceServer will
// result in compilation errors.
type UnsafeChildProfileServiceServer interface {
	mustEmbedUnimplementedChildProfileServiceServer()
}

func RegisterChildProfileServiceServer(s grpc.ServiceRegistrar, srv ChildProfileServiceServer) {
	s.RegisterService(&ChildProfileService_ServiceDesc, srv)
}

func _ChildProfileService_FindOneChildProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneChildProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildProfileServiceServer).FindOneChildProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/child_profile.ChildProfileService/FindOneChildProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildProfileServiceServer).FindOneChildProfile(ctx, req.(*FindOneChildProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChildProfileService_CreateChildProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChildProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildProfileServiceServer).CreateChildProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/child_profile.ChildProfileService/CreateChildProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildProfileServiceServer).CreateChildProfile(ctx, req.(*CreateChildProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChildProfileService_UpdateChildProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChildProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildProfileServiceServer).UpdateChildProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/child_profile.ChildProfileService/UpdateChildProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildProfileServiceServer).UpdateChildProfile(ctx, req.(*UpdateChildProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChildProfileService_DeleteChildProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChildProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildProfileServiceServer).DeleteChildProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/child_profile.ChildProfileService/DeleteChildProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildProfileServiceServer).DeleteChildProfile(ctx, req.(*DeleteChildProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChildProfileService_ServiceDesc is the grpc.ServiceDesc for ChildProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChildProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "child_profile.ChildProfileService",
	HandlerType: (*ChildProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOneChildProfile",
			Handler:    _ChildProfileService_FindOneChildProfile_Handler,
		},
		{
			MethodName: "CreateChildProfile",
			Handler:    _ChildProfileService_CreateChildProfile_Handler,
		},
		{
			MethodName: "UpdateChildProfile",
			Handler:    _ChildProfileService_UpdateChildProfile_Handler,
		},
		{
			MethodName: "DeleteChildProfile",
			Handler:    _ChildProfileService_DeleteChildProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "child_profile.proto",
}
